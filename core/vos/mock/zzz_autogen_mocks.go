// Code generated by MockGen. DO NOT EDIT.
// Source: vos.go

// Package vos is a generated GoMock package.
package vos

import (
	io "io"
	net "net"
	os "os"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	afero "github.com/spf13/afero"
	logger "josephlewis.net/osshit/core/logger"
	vos "josephlewis.net/osshit/core/vos"
)

// MockVKernel is a mock of VKernel interface.
type MockVKernel struct {
	ctrl     *gomock.Controller
	recorder *MockVKernelMockRecorder
}

// MockVKernelMockRecorder is the mock recorder for MockVKernel.
type MockVKernelMockRecorder struct {
	mock *MockVKernel
}

// NewMockVKernel creates a new mock instance.
func NewMockVKernel(ctrl *gomock.Controller) *MockVKernel {
	mock := &MockVKernel{ctrl: ctrl}
	mock.recorder = &MockVKernelMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVKernel) EXPECT() *MockVKernelMockRecorder {
	return m.recorder
}

// Hostname mocks base method.
func (m *MockVKernel) Hostname() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hostname indicates an expected call of Hostname.
func (mr *MockVKernelMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockVKernel)(nil).Hostname))
}

// Uname mocks base method.
func (m *MockVKernel) Uname() (vos.Utsname, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uname")
	ret0, _ := ret[0].(vos.Utsname)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uname indicates an expected call of Uname.
func (mr *MockVKernelMockRecorder) Uname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uname", reflect.TypeOf((*MockVKernel)(nil).Uname))
}

// MockVOS is a mock of VOS interface.
type MockVOS struct {
	ctrl     *gomock.Controller
	recorder *MockVOSMockRecorder
}

// MockVOSMockRecorder is the mock recorder for MockVOS.
type MockVOSMockRecorder struct {
	mock *MockVOS
}

// NewMockVOS creates a new mock instance.
func NewMockVOS(ctrl *gomock.Controller) *MockVOS {
	mock := &MockVOS{ctrl: ctrl}
	mock.recorder = &MockVOSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVOS) EXPECT() *MockVOSMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockVOS) Args() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockVOSMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockVOS)(nil).Args))
}

// BootTime mocks base method.
func (m *MockVOS) BootTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// BootTime indicates an expected call of BootTime.
func (mr *MockVOSMockRecorder) BootTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootTime", reflect.TypeOf((*MockVOS)(nil).BootTime))
}

// Chdir mocks base method.
func (m *MockVOS) Chdir(dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chdir", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chdir indicates an expected call of Chdir.
func (mr *MockVOSMockRecorder) Chdir(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chdir", reflect.TypeOf((*MockVOS)(nil).Chdir), dir)
}

// Chmod mocks base method.
func (m *MockVOS) Chmod(name string, mode os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chmod", name, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod.
func (mr *MockVOSMockRecorder) Chmod(name, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chmod", reflect.TypeOf((*MockVOS)(nil).Chmod), name, mode)
}

// Chown mocks base method.
func (m *MockVOS) Chown(name string, uid, gid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chown", name, uid, gid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chown indicates an expected call of Chown.
func (mr *MockVOSMockRecorder) Chown(name, uid, gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chown", reflect.TypeOf((*MockVOS)(nil).Chown), name, uid, gid)
}

// Chtimes mocks base method.
func (m *MockVOS) Chtimes(name string, atime, mtime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chtimes", name, atime, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chtimes indicates an expected call of Chtimes.
func (mr *MockVOSMockRecorder) Chtimes(name, atime, mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chtimes", reflect.TypeOf((*MockVOS)(nil).Chtimes), name, atime, mtime)
}

// Clearenv mocks base method.
func (m *MockVOS) Clearenv() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clearenv")
}

// Clearenv indicates an expected call of Clearenv.
func (mr *MockVOSMockRecorder) Clearenv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clearenv", reflect.TypeOf((*MockVOS)(nil).Clearenv))
}

// Create mocks base method.
func (m *MockVOS) Create(name string) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVOSMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVOS)(nil).Create), name)
}

// DownloadPath mocks base method.
func (m *MockVOS) DownloadPath(source string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadPath", source)
	ret0, _ := ret[0].(string)
	return ret0
}

// DownloadPath indicates an expected call of DownloadPath.
func (mr *MockVOSMockRecorder) DownloadPath(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPath", reflect.TypeOf((*MockVOS)(nil).DownloadPath), source)
}

// Environ mocks base method.
func (m *MockVOS) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *MockVOSMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockVOS)(nil).Environ))
}

// Executable mocks base method.
func (m *MockVOS) Executable() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executable")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Executable indicates an expected call of Executable.
func (mr *MockVOSMockRecorder) Executable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executable", reflect.TypeOf((*MockVOS)(nil).Executable))
}

// ExpandEnv mocks base method.
func (m *MockVOS) ExpandEnv(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandEnv", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExpandEnv indicates an expected call of ExpandEnv.
func (mr *MockVOSMockRecorder) ExpandEnv(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandEnv", reflect.TypeOf((*MockVOS)(nil).ExpandEnv), s)
}

// GetPTY mocks base method.
func (m *MockVOS) GetPTY() vos.PTY {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPTY")
	ret0, _ := ret[0].(vos.PTY)
	return ret0
}

// GetPTY indicates an expected call of GetPTY.
func (mr *MockVOSMockRecorder) GetPTY() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPTY", reflect.TypeOf((*MockVOS)(nil).GetPTY))
}

// Getenv mocks base method.
func (m *MockVOS) Getenv(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getenv", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Getenv indicates an expected call of Getenv.
func (mr *MockVOSMockRecorder) Getenv(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getenv", reflect.TypeOf((*MockVOS)(nil).Getenv), key)
}

// Getpid mocks base method.
func (m *MockVOS) Getpid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getpid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getpid indicates an expected call of Getpid.
func (mr *MockVOSMockRecorder) Getpid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getpid", reflect.TypeOf((*MockVOS)(nil).Getpid))
}

// Getuid mocks base method.
func (m *MockVOS) Getuid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getuid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getuid indicates an expected call of Getuid.
func (mr *MockVOSMockRecorder) Getuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getuid", reflect.TypeOf((*MockVOS)(nil).Getuid))
}

// Getwd mocks base method.
func (m *MockVOS) Getwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd.
func (mr *MockVOSMockRecorder) Getwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockVOS)(nil).Getwd))
}

// Hostname mocks base method.
func (m *MockVOS) Hostname() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hostname")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Hostname indicates an expected call of Hostname.
func (mr *MockVOSMockRecorder) Hostname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hostname", reflect.TypeOf((*MockVOS)(nil).Hostname))
}

// LogCreds mocks base method.
func (m *MockVOS) LogCreds(arg0 *logger.Credentials) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogCreds", arg0)
}

// LogCreds indicates an expected call of LogCreds.
func (mr *MockVOSMockRecorder) LogCreds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogCreds", reflect.TypeOf((*MockVOS)(nil).LogCreds), arg0)
}

// LogInvalidInvocation mocks base method.
func (m *MockVOS) LogInvalidInvocation(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInvalidInvocation", err)
}

// LogInvalidInvocation indicates an expected call of LogInvalidInvocation.
func (mr *MockVOSMockRecorder) LogInvalidInvocation(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInvalidInvocation", reflect.TypeOf((*MockVOS)(nil).LogInvalidInvocation), err)
}

// LoginTime mocks base method.
func (m *MockVOS) LoginTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LoginTime indicates an expected call of LoginTime.
func (mr *MockVOSMockRecorder) LoginTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginTime", reflect.TypeOf((*MockVOS)(nil).LoginTime))
}

// LookupEnv mocks base method.
func (m *MockVOS) LookupEnv(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv.
func (mr *MockVOSMockRecorder) LookupEnv(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockVOS)(nil).LookupEnv), key)
}

// Mkdir mocks base method.
func (m *MockVOS) Mkdir(name string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", name, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockVOSMockRecorder) Mkdir(name, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockVOS)(nil).Mkdir), name, perm)
}

// MkdirAll mocks base method.
func (m *MockVOS) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockVOSMockRecorder) MkdirAll(path, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockVOS)(nil).MkdirAll), path, perm)
}

// Name mocks base method.
func (m *MockVOS) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockVOSMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockVOS)(nil).Name))
}

// Now mocks base method.
func (m *MockVOS) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockVOSMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockVOS)(nil).Now))
}

// Open mocks base method.
func (m *MockVOS) Open(name string) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockVOSMockRecorder) Open(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockVOS)(nil).Open), name)
}

// OpenFile mocks base method.
func (m *MockVOS) OpenFile(name string, flag int, perm os.FileMode) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockVOSMockRecorder) OpenFile(name, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockVOS)(nil).OpenFile), name, flag, perm)
}

// Remove mocks base method.
func (m *MockVOS) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockVOSMockRecorder) Remove(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockVOS)(nil).Remove), name)
}

// RemoveAll mocks base method.
func (m *MockVOS) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockVOSMockRecorder) RemoveAll(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockVOS)(nil).RemoveAll), path)
}

// Rename mocks base method.
func (m *MockVOS) Rename(oldname, newname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", oldname, newname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockVOSMockRecorder) Rename(oldname, newname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockVOS)(nil).Rename), oldname, newname)
}

// Run mocks base method.
func (m *MockVOS) Run() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(int)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockVOSMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockVOS)(nil).Run))
}

// SSHExit mocks base method.
func (m *MockVOS) SSHExit(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHExit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SSHExit indicates an expected call of SSHExit.
func (mr *MockVOSMockRecorder) SSHExit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHExit", reflect.TypeOf((*MockVOS)(nil).SSHExit), arg0)
}

// SSHRemoteAddr mocks base method.
func (m *MockVOS) SSHRemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHRemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// SSHRemoteAddr indicates an expected call of SSHRemoteAddr.
func (mr *MockVOSMockRecorder) SSHRemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHRemoteAddr", reflect.TypeOf((*MockVOS)(nil).SSHRemoteAddr))
}

// SSHStdout mocks base method.
func (m *MockVOS) SSHStdout() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHStdout")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// SSHStdout indicates an expected call of SSHStdout.
func (mr *MockVOSMockRecorder) SSHStdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHStdout", reflect.TypeOf((*MockVOS)(nil).SSHStdout))
}

// SSHUser mocks base method.
func (m *MockVOS) SSHUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// SSHUser indicates an expected call of SSHUser.
func (mr *MockVOSMockRecorder) SSHUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHUser", reflect.TypeOf((*MockVOS)(nil).SSHUser))
}

// SetPTY mocks base method.
func (m *MockVOS) SetPTY(arg0 vos.PTY) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPTY", arg0)
}

// SetPTY indicates an expected call of SetPTY.
func (mr *MockVOSMockRecorder) SetPTY(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPTY", reflect.TypeOf((*MockVOS)(nil).SetPTY), arg0)
}

// Setenv mocks base method.
func (m *MockVOS) Setenv(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setenv", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setenv indicates an expected call of Setenv.
func (mr *MockVOSMockRecorder) Setenv(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setenv", reflect.TypeOf((*MockVOS)(nil).Setenv), key, value)
}

// StartProcess mocks base method.
func (m *MockVOS) StartProcess(name string, argv []string, attr *vos.ProcAttr) (vos.VOS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProcess", name, argv, attr)
	ret0, _ := ret[0].(vos.VOS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProcess indicates an expected call of StartProcess.
func (mr *MockVOSMockRecorder) StartProcess(name, argv, attr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcess", reflect.TypeOf((*MockVOS)(nil).StartProcess), name, argv, attr)
}

// Stat mocks base method.
func (m *MockVOS) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockVOSMockRecorder) Stat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockVOS)(nil).Stat), name)
}

// Stderr mocks base method.
func (m *MockVOS) Stderr() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockVOSMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockVOS)(nil).Stderr))
}

// Stdin mocks base method.
func (m *MockVOS) Stdin() io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdin")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// Stdin indicates an expected call of Stdin.
func (mr *MockVOSMockRecorder) Stdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdin", reflect.TypeOf((*MockVOS)(nil).Stdin))
}

// Stdout mocks base method.
func (m *MockVOS) Stdout() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *MockVOSMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockVOS)(nil).Stdout))
}

// Uname mocks base method.
func (m *MockVOS) Uname() (vos.Utsname, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uname")
	ret0, _ := ret[0].(vos.Utsname)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uname indicates an expected call of Uname.
func (mr *MockVOSMockRecorder) Uname() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uname", reflect.TypeOf((*MockVOS)(nil).Uname))
}

// Unsetenv mocks base method.
func (m *MockVOS) Unsetenv(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsetenv", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsetenv indicates an expected call of Unsetenv.
func (mr *MockVOSMockRecorder) Unsetenv(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsetenv", reflect.TypeOf((*MockVOS)(nil).Unsetenv), key)
}

// UserHomeDir mocks base method.
func (m *MockVOS) UserHomeDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHomeDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHomeDir indicates an expected call of UserHomeDir.
func (mr *MockVOSMockRecorder) UserHomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHomeDir", reflect.TypeOf((*MockVOS)(nil).UserHomeDir))
}

// MockVEnv is a mock of VEnv interface.
type MockVEnv struct {
	ctrl     *gomock.Controller
	recorder *MockVEnvMockRecorder
}

// MockVEnvMockRecorder is the mock recorder for MockVEnv.
type MockVEnvMockRecorder struct {
	mock *MockVEnv
}

// NewMockVEnv creates a new mock instance.
func NewMockVEnv(ctrl *gomock.Controller) *MockVEnv {
	mock := &MockVEnv{ctrl: ctrl}
	mock.recorder = &MockVEnvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVEnv) EXPECT() *MockVEnvMockRecorder {
	return m.recorder
}

// Clearenv mocks base method.
func (m *MockVEnv) Clearenv() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Clearenv")
}

// Clearenv indicates an expected call of Clearenv.
func (mr *MockVEnvMockRecorder) Clearenv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clearenv", reflect.TypeOf((*MockVEnv)(nil).Clearenv))
}

// Environ mocks base method.
func (m *MockVEnv) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *MockVEnvMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockVEnv)(nil).Environ))
}

// ExpandEnv mocks base method.
func (m *MockVEnv) ExpandEnv(s string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExpandEnv", s)
	ret0, _ := ret[0].(string)
	return ret0
}

// ExpandEnv indicates an expected call of ExpandEnv.
func (mr *MockVEnvMockRecorder) ExpandEnv(s interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExpandEnv", reflect.TypeOf((*MockVEnv)(nil).ExpandEnv), s)
}

// Getenv mocks base method.
func (m *MockVEnv) Getenv(key string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getenv", key)
	ret0, _ := ret[0].(string)
	return ret0
}

// Getenv indicates an expected call of Getenv.
func (mr *MockVEnvMockRecorder) Getenv(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getenv", reflect.TypeOf((*MockVEnv)(nil).Getenv), key)
}

// LookupEnv mocks base method.
func (m *MockVEnv) LookupEnv(key string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LookupEnv", key)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// LookupEnv indicates an expected call of LookupEnv.
func (mr *MockVEnvMockRecorder) LookupEnv(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LookupEnv", reflect.TypeOf((*MockVEnv)(nil).LookupEnv), key)
}

// Setenv mocks base method.
func (m *MockVEnv) Setenv(key, value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setenv", key, value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Setenv indicates an expected call of Setenv.
func (mr *MockVEnvMockRecorder) Setenv(key, value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setenv", reflect.TypeOf((*MockVEnv)(nil).Setenv), key, value)
}

// Unsetenv mocks base method.
func (m *MockVEnv) Unsetenv(key string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Unsetenv", key)
	ret0, _ := ret[0].(error)
	return ret0
}

// Unsetenv indicates an expected call of Unsetenv.
func (mr *MockVEnvMockRecorder) Unsetenv(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsetenv", reflect.TypeOf((*MockVEnv)(nil).Unsetenv), key)
}

// UserHomeDir mocks base method.
func (m *MockVEnv) UserHomeDir() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserHomeDir")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserHomeDir indicates an expected call of UserHomeDir.
func (mr *MockVEnvMockRecorder) UserHomeDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserHomeDir", reflect.TypeOf((*MockVEnv)(nil).UserHomeDir))
}

// MockEnvironFetcher is a mock of EnvironFetcher interface.
type MockEnvironFetcher struct {
	ctrl     *gomock.Controller
	recorder *MockEnvironFetcherMockRecorder
}

// MockEnvironFetcherMockRecorder is the mock recorder for MockEnvironFetcher.
type MockEnvironFetcherMockRecorder struct {
	mock *MockEnvironFetcher
}

// NewMockEnvironFetcher creates a new mock instance.
func NewMockEnvironFetcher(ctrl *gomock.Controller) *MockEnvironFetcher {
	mock := &MockEnvironFetcher{ctrl: ctrl}
	mock.recorder = &MockEnvironFetcherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEnvironFetcher) EXPECT() *MockEnvironFetcherMockRecorder {
	return m.recorder
}

// Environ mocks base method.
func (m *MockEnvironFetcher) Environ() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Environ")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Environ indicates an expected call of Environ.
func (mr *MockEnvironFetcherMockRecorder) Environ() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Environ", reflect.TypeOf((*MockEnvironFetcher)(nil).Environ))
}

// MockVIO is a mock of VIO interface.
type MockVIO struct {
	ctrl     *gomock.Controller
	recorder *MockVIOMockRecorder
}

// MockVIOMockRecorder is the mock recorder for MockVIO.
type MockVIOMockRecorder struct {
	mock *MockVIO
}

// NewMockVIO creates a new mock instance.
func NewMockVIO(ctrl *gomock.Controller) *MockVIO {
	mock := &MockVIO{ctrl: ctrl}
	mock.recorder = &MockVIOMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVIO) EXPECT() *MockVIOMockRecorder {
	return m.recorder
}

// Stderr mocks base method.
func (m *MockVIO) Stderr() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stderr")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stderr indicates an expected call of Stderr.
func (mr *MockVIOMockRecorder) Stderr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stderr", reflect.TypeOf((*MockVIO)(nil).Stderr))
}

// Stdin mocks base method.
func (m *MockVIO) Stdin() io.ReadCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdin")
	ret0, _ := ret[0].(io.ReadCloser)
	return ret0
}

// Stdin indicates an expected call of Stdin.
func (mr *MockVIOMockRecorder) Stdin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdin", reflect.TypeOf((*MockVIO)(nil).Stdin))
}

// Stdout mocks base method.
func (m *MockVIO) Stdout() io.WriteCloser {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stdout")
	ret0, _ := ret[0].(io.WriteCloser)
	return ret0
}

// Stdout indicates an expected call of Stdout.
func (mr *MockVIOMockRecorder) Stdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stdout", reflect.TypeOf((*MockVIO)(nil).Stdout))
}

// MockVProc is a mock of VProc interface.
type MockVProc struct {
	ctrl     *gomock.Controller
	recorder *MockVProcMockRecorder
}

// MockVProcMockRecorder is the mock recorder for MockVProc.
type MockVProcMockRecorder struct {
	mock *MockVProc
}

// NewMockVProc creates a new mock instance.
func NewMockVProc(ctrl *gomock.Controller) *MockVProc {
	mock := &MockVProc{ctrl: ctrl}
	mock.recorder = &MockVProcMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVProc) EXPECT() *MockVProcMockRecorder {
	return m.recorder
}

// Args mocks base method.
func (m *MockVProc) Args() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Args")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Args indicates an expected call of Args.
func (mr *MockVProcMockRecorder) Args() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Args", reflect.TypeOf((*MockVProc)(nil).Args))
}

// Chdir mocks base method.
func (m *MockVProc) Chdir(dir string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chdir", dir)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chdir indicates an expected call of Chdir.
func (mr *MockVProcMockRecorder) Chdir(dir interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chdir", reflect.TypeOf((*MockVProc)(nil).Chdir), dir)
}

// Executable mocks base method.
func (m *MockVProc) Executable() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Executable")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Executable indicates an expected call of Executable.
func (mr *MockVProcMockRecorder) Executable() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Executable", reflect.TypeOf((*MockVProc)(nil).Executable))
}

// Getpid mocks base method.
func (m *MockVProc) Getpid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getpid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getpid indicates an expected call of Getpid.
func (mr *MockVProcMockRecorder) Getpid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getpid", reflect.TypeOf((*MockVProc)(nil).Getpid))
}

// Getuid mocks base method.
func (m *MockVProc) Getuid() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getuid")
	ret0, _ := ret[0].(int)
	return ret0
}

// Getuid indicates an expected call of Getuid.
func (mr *MockVProcMockRecorder) Getuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getuid", reflect.TypeOf((*MockVProc)(nil).Getuid))
}

// Getwd mocks base method.
func (m *MockVProc) Getwd() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Getwd")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Getwd indicates an expected call of Getwd.
func (mr *MockVProcMockRecorder) Getwd() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Getwd", reflect.TypeOf((*MockVProc)(nil).Getwd))
}

// Run mocks base method.
func (m *MockVProc) Run() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(int)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockVProcMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockVProc)(nil).Run))
}

// MockVFS is a mock of VFS interface.
type MockVFS struct {
	ctrl     *gomock.Controller
	recorder *MockVFSMockRecorder
}

// MockVFSMockRecorder is the mock recorder for MockVFS.
type MockVFSMockRecorder struct {
	mock *MockVFS
}

// NewMockVFS creates a new mock instance.
func NewMockVFS(ctrl *gomock.Controller) *MockVFS {
	mock := &MockVFS{ctrl: ctrl}
	mock.recorder = &MockVFSMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockVFS) EXPECT() *MockVFSMockRecorder {
	return m.recorder
}

// Chmod mocks base method.
func (m *MockVFS) Chmod(name string, mode os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chmod", name, mode)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chmod indicates an expected call of Chmod.
func (mr *MockVFSMockRecorder) Chmod(name, mode interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chmod", reflect.TypeOf((*MockVFS)(nil).Chmod), name, mode)
}

// Chown mocks base method.
func (m *MockVFS) Chown(name string, uid, gid int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chown", name, uid, gid)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chown indicates an expected call of Chown.
func (mr *MockVFSMockRecorder) Chown(name, uid, gid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chown", reflect.TypeOf((*MockVFS)(nil).Chown), name, uid, gid)
}

// Chtimes mocks base method.
func (m *MockVFS) Chtimes(name string, atime, mtime time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Chtimes", name, atime, mtime)
	ret0, _ := ret[0].(error)
	return ret0
}

// Chtimes indicates an expected call of Chtimes.
func (mr *MockVFSMockRecorder) Chtimes(name, atime, mtime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Chtimes", reflect.TypeOf((*MockVFS)(nil).Chtimes), name, atime, mtime)
}

// Create mocks base method.
func (m *MockVFS) Create(name string) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", name)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockVFSMockRecorder) Create(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockVFS)(nil).Create), name)
}

// Mkdir mocks base method.
func (m *MockVFS) Mkdir(name string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Mkdir", name, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// Mkdir indicates an expected call of Mkdir.
func (mr *MockVFSMockRecorder) Mkdir(name, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Mkdir", reflect.TypeOf((*MockVFS)(nil).Mkdir), name, perm)
}

// MkdirAll mocks base method.
func (m *MockVFS) MkdirAll(path string, perm os.FileMode) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkdirAll", path, perm)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkdirAll indicates an expected call of MkdirAll.
func (mr *MockVFSMockRecorder) MkdirAll(path, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkdirAll", reflect.TypeOf((*MockVFS)(nil).MkdirAll), path, perm)
}

// Name mocks base method.
func (m *MockVFS) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockVFSMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockVFS)(nil).Name))
}

// Open mocks base method.
func (m *MockVFS) Open(name string) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Open", name)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Open indicates an expected call of Open.
func (mr *MockVFSMockRecorder) Open(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Open", reflect.TypeOf((*MockVFS)(nil).Open), name)
}

// OpenFile mocks base method.
func (m *MockVFS) OpenFile(name string, flag int, perm os.FileMode) (afero.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OpenFile", name, flag, perm)
	ret0, _ := ret[0].(afero.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenFile indicates an expected call of OpenFile.
func (mr *MockVFSMockRecorder) OpenFile(name, flag, perm interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenFile", reflect.TypeOf((*MockVFS)(nil).OpenFile), name, flag, perm)
}

// Remove mocks base method.
func (m *MockVFS) Remove(name string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Remove", name)
	ret0, _ := ret[0].(error)
	return ret0
}

// Remove indicates an expected call of Remove.
func (mr *MockVFSMockRecorder) Remove(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Remove", reflect.TypeOf((*MockVFS)(nil).Remove), name)
}

// RemoveAll mocks base method.
func (m *MockVFS) RemoveAll(path string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveAll", path)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveAll indicates an expected call of RemoveAll.
func (mr *MockVFSMockRecorder) RemoveAll(path interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveAll", reflect.TypeOf((*MockVFS)(nil).RemoveAll), path)
}

// Rename mocks base method.
func (m *MockVFS) Rename(oldname, newname string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Rename", oldname, newname)
	ret0, _ := ret[0].(error)
	return ret0
}

// Rename indicates an expected call of Rename.
func (mr *MockVFSMockRecorder) Rename(oldname, newname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Rename", reflect.TypeOf((*MockVFS)(nil).Rename), oldname, newname)
}

// Stat mocks base method.
func (m *MockVFS) Stat(name string) (os.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", name)
	ret0, _ := ret[0].(os.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockVFSMockRecorder) Stat(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockVFS)(nil).Stat), name)
}

// MockHoneypot is a mock of Honeypot interface.
type MockHoneypot struct {
	ctrl     *gomock.Controller
	recorder *MockHoneypotMockRecorder
}

// MockHoneypotMockRecorder is the mock recorder for MockHoneypot.
type MockHoneypotMockRecorder struct {
	mock *MockHoneypot
}

// NewMockHoneypot creates a new mock instance.
func NewMockHoneypot(ctrl *gomock.Controller) *MockHoneypot {
	mock := &MockHoneypot{ctrl: ctrl}
	mock.recorder = &MockHoneypotMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHoneypot) EXPECT() *MockHoneypotMockRecorder {
	return m.recorder
}

// BootTime mocks base method.
func (m *MockHoneypot) BootTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BootTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// BootTime indicates an expected call of BootTime.
func (mr *MockHoneypotMockRecorder) BootTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BootTime", reflect.TypeOf((*MockHoneypot)(nil).BootTime))
}

// DownloadPath mocks base method.
func (m *MockHoneypot) DownloadPath(source string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DownloadPath", source)
	ret0, _ := ret[0].(string)
	return ret0
}

// DownloadPath indicates an expected call of DownloadPath.
func (mr *MockHoneypotMockRecorder) DownloadPath(source interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DownloadPath", reflect.TypeOf((*MockHoneypot)(nil).DownloadPath), source)
}

// GetPTY mocks base method.
func (m *MockHoneypot) GetPTY() vos.PTY {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPTY")
	ret0, _ := ret[0].(vos.PTY)
	return ret0
}

// GetPTY indicates an expected call of GetPTY.
func (mr *MockHoneypotMockRecorder) GetPTY() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPTY", reflect.TypeOf((*MockHoneypot)(nil).GetPTY))
}

// LogCreds mocks base method.
func (m *MockHoneypot) LogCreds(arg0 *logger.Credentials) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogCreds", arg0)
}

// LogCreds indicates an expected call of LogCreds.
func (mr *MockHoneypotMockRecorder) LogCreds(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogCreds", reflect.TypeOf((*MockHoneypot)(nil).LogCreds), arg0)
}

// LogInvalidInvocation mocks base method.
func (m *MockHoneypot) LogInvalidInvocation(err error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LogInvalidInvocation", err)
}

// LogInvalidInvocation indicates an expected call of LogInvalidInvocation.
func (mr *MockHoneypotMockRecorder) LogInvalidInvocation(err interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LogInvalidInvocation", reflect.TypeOf((*MockHoneypot)(nil).LogInvalidInvocation), err)
}

// LoginTime mocks base method.
func (m *MockHoneypot) LoginTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// LoginTime indicates an expected call of LoginTime.
func (mr *MockHoneypotMockRecorder) LoginTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginTime", reflect.TypeOf((*MockHoneypot)(nil).LoginTime))
}

// Now mocks base method.
func (m *MockHoneypot) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockHoneypotMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockHoneypot)(nil).Now))
}

// SSHExit mocks base method.
func (m *MockHoneypot) SSHExit(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHExit", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SSHExit indicates an expected call of SSHExit.
func (mr *MockHoneypotMockRecorder) SSHExit(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHExit", reflect.TypeOf((*MockHoneypot)(nil).SSHExit), arg0)
}

// SSHRemoteAddr mocks base method.
func (m *MockHoneypot) SSHRemoteAddr() net.Addr {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHRemoteAddr")
	ret0, _ := ret[0].(net.Addr)
	return ret0
}

// SSHRemoteAddr indicates an expected call of SSHRemoteAddr.
func (mr *MockHoneypotMockRecorder) SSHRemoteAddr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHRemoteAddr", reflect.TypeOf((*MockHoneypot)(nil).SSHRemoteAddr))
}

// SSHStdout mocks base method.
func (m *MockHoneypot) SSHStdout() io.Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHStdout")
	ret0, _ := ret[0].(io.Writer)
	return ret0
}

// SSHStdout indicates an expected call of SSHStdout.
func (mr *MockHoneypotMockRecorder) SSHStdout() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHStdout", reflect.TypeOf((*MockHoneypot)(nil).SSHStdout))
}

// SSHUser mocks base method.
func (m *MockHoneypot) SSHUser() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SSHUser")
	ret0, _ := ret[0].(string)
	return ret0
}

// SSHUser indicates an expected call of SSHUser.
func (mr *MockHoneypotMockRecorder) SSHUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SSHUser", reflect.TypeOf((*MockHoneypot)(nil).SSHUser))
}

// SetPTY mocks base method.
func (m *MockHoneypot) SetPTY(arg0 vos.PTY) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetPTY", arg0)
}

// SetPTY indicates an expected call of SetPTY.
func (mr *MockHoneypotMockRecorder) SetPTY(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetPTY", reflect.TypeOf((*MockHoneypot)(nil).SetPTY), arg0)
}

// StartProcess mocks base method.
func (m *MockHoneypot) StartProcess(name string, argv []string, attr *vos.ProcAttr) (vos.VOS, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartProcess", name, argv, attr)
	ret0, _ := ret[0].(vos.VOS)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartProcess indicates an expected call of StartProcess.
func (mr *MockHoneypotMockRecorder) StartProcess(name, argv, attr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartProcess", reflect.TypeOf((*MockHoneypot)(nil).StartProcess), name, argv, attr)
}
