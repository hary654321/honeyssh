package config

import (
	"crypto/rsa"
	"crypto/x509"
	"encoding/pem"
	"errors"
	"fmt"
	"io/ioutil"
	"log"
	mathrand "math/rand"
	"os"

	"sigs.k8s.io/yaml"
)

// Initialize creates the honeypot configuartion in the given directory.
func Initialize(path string) error {
	// Make sure path exists
	stat, err := os.Stat(path)
	if err != nil {
		return err
	}
	if !stat.Mode().IsDir() {
		return errors.New("intialization path must be a directory")
	}

	// Set up configuration file.
	log.Println("Creating configuration...")
	cfg := defaultConfig()
	cfg.configurationDir = path
	if !exists(cfg.ConfigurationPath()) {
		cfgBytes, err := yaml.Marshal(cfg)
		if err != nil {
			return err
		}
		if err := ioutil.WriteFile(cfg.ConfigurationPath(), cfgBytes, 0600); err != nil {
			return fmt.Errorf("couldn't write configuration file to %q: %v", cfg.ConfigurationPath(), err)
		}
	} else {
		log.Println("  already exists")
	}

	// Make directories.
	log.Println("Making directories...")
	for _, dir := range []string{
		cfg.DownloadPath(),
		cfg.LogPath(),
	} {
		log.Println("  ", dir)
		if err := os.MkdirAll(dir, 0700); err != nil {
			return fmt.Errorf("couldn't make directory %q: %v", dir, err)
		}
	}

	// Create host key.
	log.Println("Creating private key...")
	if !exists(cfg.HostKeyPath()) {
		// WARNING: The keys produced by this function ARE NOT SECURE, but we don't
		// rely on a cryptographically secure RNG because randomness is often low
		// on cloud machines.
		log.Println(
			"WARNING: The generated RSA key SHOULD NOT be used for " +
				"real security, it wasn't generated by a cryptographically secure RNG.")

		key, err := rsa.GenerateKey(&insecureRandomReader{}, 2048)
		if err != nil {
			return fmt.Errorf("couldn't create private key: %v", err)
		}

		pemBlock := pem.EncodeToMemory(&pem.Block{
			Type:  "RSA PRIVATE KEY",
			Bytes: x509.MarshalPKCS1PrivateKey(key),
		})
		if err := ioutil.WriteFile(cfg.HostKeyPath(), pemBlock, 0600); err != nil {
			return fmt.Errorf("couldn't write private key to %q: %v", cfg.HostKeyPath(), err)
		}
	} else {
		log.Println("  already exists")
	}
	// Create root FS tar.
	return nil
}

func exists(path string) bool {
	// This is hacky, but good enough.
	_, err := os.Stat(path)
	return err == nil
}

type insecureRandomReader struct{}

func (insecureRandomReader) Read(bytes []byte) (int, error) {
	for i := range bytes {
		bytes[i] = byte(mathrand.Int())
	}
	return len(bytes), nil
}
